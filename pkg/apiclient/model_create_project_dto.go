/*
Daytona Server API

Daytona Server API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the CreateProjectDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateProjectDTO{}

// CreateProjectDTO struct for CreateProjectDTO
type CreateProjectDTO struct {
	ExistingProjectConfig *ExistingProjectConfigDTO `json:"existingProjectConfig,omitempty"`
	NewProjectConfig      *CreateProjectConfigDTO   `json:"newProjectConfig,omitempty"`
}

// NewCreateProjectDTO instantiates a new CreateProjectDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateProjectDTO() *CreateProjectDTO {
	this := CreateProjectDTO{}
	return &this
}

// NewCreateProjectDTOWithDefaults instantiates a new CreateProjectDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateProjectDTOWithDefaults() *CreateProjectDTO {
	this := CreateProjectDTO{}
	return &this
}

// GetExistingProjectConfig returns the ExistingProjectConfig field value if set, zero value otherwise.
func (o *CreateProjectDTO) GetExistingProjectConfig() ExistingProjectConfigDTO {
	if o == nil || IsNil(o.ExistingProjectConfig) {
		var ret ExistingProjectConfigDTO
		return ret
	}
	return *o.ExistingProjectConfig
}

// GetExistingProjectConfigOk returns a tuple with the ExistingProjectConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProjectDTO) GetExistingProjectConfigOk() (*ExistingProjectConfigDTO, bool) {
	if o == nil || IsNil(o.ExistingProjectConfig) {
		return nil, false
	}
	return o.ExistingProjectConfig, true
}

// HasExistingProjectConfig returns a boolean if a field has been set.
func (o *CreateProjectDTO) HasExistingProjectConfig() bool {
	if o != nil && !IsNil(o.ExistingProjectConfig) {
		return true
	}

	return false
}

// SetExistingProjectConfig gets a reference to the given ExistingProjectConfigDTO and assigns it to the ExistingProjectConfig field.
func (o *CreateProjectDTO) SetExistingProjectConfig(v ExistingProjectConfigDTO) {
	o.ExistingProjectConfig = &v
}

// GetNewProjectConfig returns the NewProjectConfig field value if set, zero value otherwise.
func (o *CreateProjectDTO) GetNewProjectConfig() CreateProjectConfigDTO {
	if o == nil || IsNil(o.NewProjectConfig) {
		var ret CreateProjectConfigDTO
		return ret
	}
	return *o.NewProjectConfig
}

// GetNewProjectConfigOk returns a tuple with the NewProjectConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProjectDTO) GetNewProjectConfigOk() (*CreateProjectConfigDTO, bool) {
	if o == nil || IsNil(o.NewProjectConfig) {
		return nil, false
	}
	return o.NewProjectConfig, true
}

// HasNewProjectConfig returns a boolean if a field has been set.
func (o *CreateProjectDTO) HasNewProjectConfig() bool {
	if o != nil && !IsNil(o.NewProjectConfig) {
		return true
	}

	return false
}

// SetNewProjectConfig gets a reference to the given CreateProjectConfigDTO and assigns it to the NewProjectConfig field.
func (o *CreateProjectDTO) SetNewProjectConfig(v CreateProjectConfigDTO) {
	o.NewProjectConfig = &v
}

func (o CreateProjectDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateProjectDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExistingProjectConfig) {
		toSerialize["existingProjectConfig"] = o.ExistingProjectConfig
	}
	if !IsNil(o.NewProjectConfig) {
		toSerialize["newProjectConfig"] = o.NewProjectConfig
	}
	return toSerialize, nil
}

type NullableCreateProjectDTO struct {
	value *CreateProjectDTO
	isSet bool
}

func (v NullableCreateProjectDTO) Get() *CreateProjectDTO {
	return v.value
}

func (v *NullableCreateProjectDTO) Set(val *CreateProjectDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateProjectDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateProjectDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateProjectDTO(val *CreateProjectDTO) *NullableCreateProjectDTO {
	return &NullableCreateProjectDTO{value: val, isSet: true}
}

func (v NullableCreateProjectDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateProjectDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
